import os
import glob
import math
import datetime as dt
import numpy as np
import pandas as pd
import pandas_ta  # Provides technical analysis methods (e.g. df.ta.rsi, df.ta.sma)
from csv import writer

def append_list_as_row(file_name, row):
    """Append a list as a new row to a CSV file."""
    with open(file_name, 'a+', newline='') as f:
        writer(f).writerow(row)

def run_patsim(series, pattern, window, max_window):
    """
    Compute a pattern similarity measure for a pandas Series.
    
    For each index i (starting from when enough data is available), this function examines
    all rolling windows of lengths L from 'window' to 'max_window' (or i+1, whichever is smaller).
    Within each rolling window, it slides a subwindow of length equal to the pattern length,
    computes the rank order (smallest value = rank 1, etc.) of that subwindow, and then calculates
    the sum of absolute differences between these ranks and the target pattern.
    
    The output at each index is the minimum similarity value found over all such subwindows.
    Lower similarity values indicate a better match.
    """
    p = len(pattern)
    sim_values = np.full(len(series), np.nan, dtype=float)
    
    # Loop over the series indices
    for i in range(len(series)):
        if i < window - 1:
            continue  # Not enough data yet
        best_sim = np.inf
        # The maximum window length available at position i
        maxL = min(max_window, i + 1)
        # Try each window length from 'window' to 'maxL'
        for L in range(window, maxL + 1):
            window_data = series.iloc[i - L + 1 : i + 1].values
            # For each possible subwindow of length p within this window_data...
            for j in range(L - p + 1):
                subwindow = window_data[j : j + p]
                # Compute ranks: argsort twice gives the ranking (starting at 0, so add 1)
                ranks = subwindow.argsort().argsort() + 1
                sim = np.sum(np.abs(ranks - pattern))
                if sim < best_sim:
                    best_sim = sim
        sim_values[i] = best_sim if best_sim != np.inf else np.nan
    return pd.Series(sim_values, index=series.index)

class PatSimResult:
    """A simple container for the simulation result."""
    def __init__(self, sim):
        self.sim = sim

class PatSim:
    """
    Custom implementation to replace vectorbtpro's pattern simulation.
    Usage:
        result = PatSim.run(series, pattern=<np.array>, window=<int>, max_window=<int>)
        similarity_series = result.sim
    """
    @staticmethod
    def run(series, pattern, window, max_window):
        sim = run_patsim(series, pattern, window, max_window)
        return PatSimResult(sim)

def backtest_supertrend(df, investment, filepath):
    """
    A simple backtest that uses two signals:
      - 'entries': a boolean series based on our custom pattern similarity comparisons.
      - 'Minervi': a trend filter based on the 50MA > 200MA.
    
    It simulates buying (in 100-share lots) when both conditions are met, and selling when they aren't.
    Trade details and final ROI are printed and appended to 'daily.csv'.
    """
    # Use the combined signal: both the entry signal and the trend filter must be True.
    is_uptrend = df['entries'] & df['Minervi']
    close = df['Close']
    in_position = False
    equity = investment
    commission = 5
    shares = 0
    entries = []
    exits = []
    
    for i in range(2, len(df)):
        if not in_position and is_uptrend.iloc[i]:
            # Buy as many shares as possible in 100-share lots.
            shares = math.floor(equity / close.iloc[i] / 100) * 100
            equity -= shares * close.iloc[i]
            entries.append((i, close.iloc[i]))
            in_position = True
            print(f'Buy {shares} shares for {filepath} at {round(close.iloc[i], 2)} on {df.index[i].strftime("%Y/%m/%d")}')
        elif in_position and not is_uptrend.iloc[i]:
            equity += shares * close.iloc[i] - commission
            exits.append((i, close.iloc[i]))
            in_position = False
            print(f'Sell for {filepath} at {round(close.iloc[i], 2)} on {df.index[i].strftime("%Y/%m/%d")}')
    # If still in position at the end, liquidate the shares.
    if in_position:
        equity += shares * close.iloc[-1] - commission
        
    earning = equity - investment
    roi = round(earning / investment * 100, 2)
    print(f'Earning from investing ${investment} in {filepath} is ${round(earning, 2)} (ROI = {roi}%)')
    append_list_as_row('daily.csv', [shares, filepath, roi, df.index[-1].strftime("%Y/%m/%d")])
    return entries, exits, equity

def process_file(filepath, investment=100000, rsidivsense=1.1):
    """
    Process a CSV file containing stock data:
      - Computes technical indicators (RSI, 50MA, 200MA).
      - Computes custom pattern similarities on the Low prices and RSI.
      - Computes a Fibonacci level and the percent distance from it.
      - Generates an entry signal based on the custom pattern measures.
      - Runs a backtest and saves updated data.
    """
    df = pd.read_csv(filepath, index_col='Date', parse_dates=True)
    
    # Calculate technical indicators using pandas_ta.
    df['RSI'] = df.ta.rsi(length=14)
    df['50MA'] = df.ta.sma(50)
    df['200MA'] = df.ta.sma(200)
    
    # Custom pattern simulation:
    # For the 'Low' price series, look for a pattern [4, 2, 3, 1]
    # For the 'RSI' series, look for a pattern [1, 3, 2, 4]
    price_pattern = np.array([4, 2, 3, 1])
    rsi_pattern = np.array([1, 3, 2, 4])
    price_lows = PatSim.run(df['Low'], pattern=price_pattern, window=40, max_window=50)
    df['Price Sim'] = price_lows.sim
    rsi_highs = PatSim.run(df['RSI'], pattern=rsi_pattern, window=40, max_window=50)
    df['RSI Sim'] = rsi_highs.sim
    
    # Calculate Fibonacci levels (using the third level here) and percent distance.
    max_price = df['Close'].max()
    min_price = df['Close'].min()
    difference = max_price - min_price
    third_level = max_price - difference * 0.618
    df['fromlevel'] = abs(100 * ((third_level - df['Close']) / ((third_level + df['Close']) / 2)))
    
    # Entry signal: when Price Sim is less than RSI Sim (scaled by sensitivity).
    df['entries'] = (df['Price Sim'] < (df['RSI Sim'] * rsidivsense))
    
    # Trend filter: 50MA must be above 200MA.
    df['Minervi'] = df['50MA'] > df['200MA']
    
    # Save the updated DataFrame back to the CSV.
    df.to_csv(filepath)
    
    # Run the backtest.
    return backtest_supertrend(df, investment, filepath)

def main():
    # Get all CSV files in the "stock_data" folder.
    csv_files = glob.glob(os.path.join("stock_data", "*.csv"))
    
    # Remove the summary file if it exists.
    if os.path.exists('daily.csv'):
        os.remove('daily.csv')
        
    # Process each CSV file.
    for filepath in csv_files:
        try:
            process_file(filepath)
        except Exception as e:
            print(f"Error processing {filepath}: {e}")

if __name__ == "__main__":
    main()
